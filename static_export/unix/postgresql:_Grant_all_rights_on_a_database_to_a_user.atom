<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">l4x.org</title>
<subtitle type="html"><![CDATA[
Home of Jan Dittmer
]]></subtitle>
<id>https://l4x.org/unix/postgresql:_Grant_all_rights_on_a_database_to_a_user.atom</id>
<link rel="alternate" type="text/html" href="https://l4x.org" />
<link rel="self" type="application/atom+xml" href="https://l4x.org/unix/postgresql:_Grant_all_rights_on_a_database_to_a_user.atom" />


<author>
<name>jdi et al.</name>
<uri>https://l4x.org/unix/postgresql:_Grant_all_rights_on_a_database_to_a_user.atom</uri>
<email>jdi@l4x.org</email>
</author>
<rights>Copyright 2008-2015 Jan Dittmer</rights>
<generator uri="http://pyblosxom.sourceforge.net/" version="1.5.3">
PyBlosxom http://pyblosxom.sourceforge.net/ 1.5.3
</generator>

<updated>2005-06-10T03:27:00Z</updated>
<!-- icon?  logo?  -->

<entry>
<title type="html">postgresql:_Grant_all_rights_on_a_database_to_a_user</title>
<category term="" />
<id>https://l4x.org/2005/06/09/postgresql:_Grant_all_rights_on_a_database_to_a_user</id>
<updated>2005-06-10T03:27:00Z</updated>
<published>2005-06-10T03:27:00Z</published>
<link rel="alternate" type="text/html" href="https://l4x.org/unix/postgresql%3A_Grant_all_rights_on_a_database_to_a_user.html" />
<content type="html">
Ever tried the $SUBJECT task with postgresql? It&#x27;s a bit difficult.&lt;br&gt; You need something along the lines of this...


Ever tried the $SUBJECT task with postgresql? It&#x27;s a bit difficult.&lt;br&gt; You need something along the lines of this...
&lt;!--break--&gt;

&lt;pre&gt;
#!&#x2F;bin&#x2F;sh

DB=&quot;$1&quot;
USER=&quot;$2&quot;
PSQL=&quot;psql -q -n -A -t&quot;
SCHEMES=&quot;&#x27;public&#x27;&quot;

if [ -z &quot;$1&quot; ]; then
        echo No name given
        exit
fi

if [ -z &quot;$2&quot; ]; then
        USER=&quot;$1&quot;
fi
echo &quot;-- Granting rights on $DB to $USER ($SCHEMES)&quot;
# tables
Q=&quot;select &#x27;grant all on &#x27;||schemaname||&#x27;.&#x27;||tablename||&#x27; to \\\&quot;$USER\\\&quot;;&#x27; from pg_tables where schemaname in ($SCHEMES);&quot;
$PSQL -c &quot;$Q&quot; &quot;$DB&quot;;

# views
Q=&quot;select &#x27;grant all on &#x27;||schemaname||&#x27;.&#x27;||viewname||&#x27; to \\\&quot;$USER\\\&quot;;&#x27; from pg_views where schemaname in ($SCHEMES);&quot;
$PSQL -c &quot;$Q&quot; &quot;$DB&quot;;

# sequences
Q=&quot;select &#x27;grant all on function &#x27;||n.nspname||&#x27;.&#x27;||p.proname||&#x27;(&#x27;||oidvectortypes(p.proargtypes)||&#x27;) to \\\&quot;$USER\\\&quot;;&#x27; from pg_proc p, pg_namespace n where n.oid = p.pronamespace and n.nspname in ($SCHEMES);&quot;
$PSQL -c &quot;$Q&quot; &quot;$DB&quot;;

# functions
Q=&quot;select &#x27;grant all on &#x27;||n.nspname||&#x27;.&#x27;||c.relname||&#x27; to \\\&quot;$USER\\\&quot;;&#x27; from pg_class c, pg_namespace n where n.oid = c.relnamespace and c.relkind IN (&#x27;S&#x27;) and n.nspname in ($SCHEMES);&quot;
$PSQL -c &quot;$Q&quot; &quot;$DB&quot;;

&lt;&#x2F;pre&gt;
(Sorry for the crappy formatting, drupal &amp;amp; me sucks)&lt;br&gt;
&lt;br&gt;
This will generate a script which in turn will grant the rights.
So a typical call will be (as postgres user)
&lt;pre&gt;
.&#x2F;grant mydatabase myuser | psql mydatabase
&lt;&#x2F;pre&gt;

</content>
</entry>
</feed>
